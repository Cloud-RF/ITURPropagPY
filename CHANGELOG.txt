--------------------------- version 1.0 --> version 1.1 ---------------------------
1-  iturpropag --> models --> iturp835
	. The formulas in the function of temperature, pressure, standard_temperature 
	and standard_pressure of iturp835 corrected
-----------------------------------------------------------------------------------
--------------------------- version 1.1 --> version 1.2 ---------------------------
1- 	iturpropag-->models-->iturp676: 
	In the calculation of slant path gaseous attenuation with the exact solution:
	. In the MIT version, the integration was done from altitude 0m to 100 km, which 
	is corrected in ground station altitude to 100 km.
	. the refractivity index ratio was reversed in the routine. This has been 
	corrected  n_(n+1)/n_n --> n_n/n_(n+1) 
	. in the calculation of refractivity index, the MIT version used the total pressure 
	profile, the water vapour partial pressure (e) at ground level and Temperature (T) 
	at ground level. This would lead to considering different altitudes for the p, T and e 
	parameters. This has been corrected and the profiles of all three-parameter (P, e, T) 
	are now used.
	. In the calculation of specific attenuation, the input for pressure was “dry air pressure”, 
	but in different places, by mistake, the total pressure was used. It has been decided to 
	replace the  “Dry air pressure” by the  “total pressure”, in all the routines. This corresponds
	to the parameter available in meteorological datafiles.
	. In the function of zenith water vapour pressure, the dry air reference pressure is 
	replaced by total reference pressure.
	. In the function of inclined path gaseous attenuation: formula 35b and 35c were written 
	incorrectly, this  is corrected now.
	. In the function of slant inclined path, the equivalent height unit was ‘meter’ which is 
	changed to ‘km’ now.

2- iturpropag --> models --> iturp835
	. the __version.py file is corrected. The name of the functions was written incorrectly.

3- iturpropag --> models --> iturp453
	. the output of the function for the saturation vapor pressure is changed. The restriction 
	temperature condition is added to the function: depending on the temperature chosen by the 
	user, he receives either the saturation pressure for water, ice or both (in the range -40°C to 0°C).
	. datasets of version 13 for functions DN1 and DN65 are added to datasets.

4- iturpropag --> models --> iturp618
	. eq.73 in function rain cross polarization discrimination is corrected.
-----------------------------------------------------------------------------------
--------------------------- version 1.3 --> version 1.4 ---------------------------
1- iturpropag --> models --> iturp1853
	. name of the function 'scintillation_attenuation_syntheis' is corrected to
	'scintillation_attenuation_synthesis'

2- iturpropag --> models --> iturp618 --> rain_attenuation.py
	. model of rain attenuation in ITU-R P.618-12 is deleted since it is equal 
	to model ITU-R P.618-13
	. lines 169-173:
		Before : the input value A001=0 was not possible to be entered
		After: the value A001=0 is able to be enterTesting procedures for the
		software developed after

3- iturpropag --> models --> iturp835 --> standard_pressure.py                                                              
	. the pressure for h>100 km is assumed NaN value, which before it was supposed 0
	. line 63 : modified the coding which makes it possible to accept negative powers

-----------------------------------------------------------------------------------
--------------------------- version 1.4 --> version 1.5 ---------------------------
1- iturpropag --> models --> iturp840 --> columnar_content_reduced_liquid.py
	. the probability value p=99 % is added in lines : 74,91,128,145,182,199,235,252

2- iturpropag --> models --> iturp840 --> columnar_content_reduced_liquid.py
	. for percentage value more than 99% (p>99%) the value will be reset to 99. p>99 --> p=99

3- iturpropag --> models --> iturp840 --> lognormal_approximation_coefficient.py
	. lines 95,96,97 --> v6_pclw, v6_lat, v6_lon are changed to v7_pclw, v7_lat, v7_lon

4- iturpropag-->utils
	. 'pdf', 'ccdf', 'bin_edges' and 'bin_width' are added to the output of 'ccdf' function

5- iturpropag --> models --> iturp835 --> standard_pressure.py
	. line 63: the value hp=0 km was excluded from equations. This value is now added.
				 Before if the h=0 km was entered, the pressure output would become nan value

6- iturpropag --> models --> iturp618 --> fit_rain_attenuation_to_lognormal.py
	. the input parameters for this fcn is changed. 
		before : fit_rain_attenuation_to_lognormal(self, lat, lon, f, el, hs, P_k, tau)
		after :  fit_rain_attenuation_to_lognormal(self, lat, lon, f, el, tau, hs=None, P_k=None)
	in this mode, the user can leave the two parameter hs and P_k empty. these values will be calculated
	directly from ITU-R P.1511 and ITU-R P.837

7- iturpropag --> models --> iturp618 --> site_diversity_rain_outage_probability.py
	. line 134:
		before: sigma_lna2, m_lna2 = fit_rain_attenuation_to_lognormal(
             					lat2, lon2, f, el2, hs1, P_2 * 100, tau)
		after : sigma_lna2, m_lna2 = fit_rain_attenuation_to_lognormal(
             					lat2, lon2, f, el2, tau, hs2, P_2 * 100)

8- test --> test_examples
	. one example of rain attenuation time-series (ITU-R P.1853-1) is added
	. one example of cloud attenuation time-series (ITU-R P.1853-1) is added
									 
9- the new version needs h5py package.

10- iturpropag-->utils.py
	. load_data function is modified. now it can read h5 files.
	speed of opening *.h5 file is much quicker than *.txt file. which for large files
	*.h5 is so efficient.

11- iturpropag --> models --> iturp1511 --> topographic_altitude.py
	. the new version of this recommendation ITU-R P.1511-2 is implemented.
	the grid resolution is now 0.08 degree in the new version. the last version
	resolution was 0.5 degree.

12- some data.txt files are exchanged with data.h5

13- iturpropag --> models --> iturp618 --> scintillation_attenuation_sigma.py
	. the p (percentage of the time) from the input of this function is removed.
	this function doesn't need p(%)
	. the scintillation_attenuation.py is also corrected when calling that
	function

14- iturpropag --> models --> iturp1853
	. the version of ITU-R P.1853-2 is implemented.
	. functions of "surface_mean_water_vapour_density" and "surface_mean_pressure"
	are implemented  for use in ITU-R P.1853-2
	. function of "integrated_water_vapour_synthesis" is replaced with
	"water_vapour_attenuation_synthesis for ITU-R P.1853-1"

15- iturpropag --> models --> iturp676 --> slant_inclined_path_equivalent_height
	. there is a vague in inputs type. for user (specially amateur one)
	it may cause a big mistake. in program routing the calculation
	 is vectorized over (frequency) (line 52, 53) and the procedure is repeated
	 over Pressure. it's better to remove this vectorization:
	 consider below examples:
	 1- the outputs are correct
	 	f = [39, 40]
	 	p = [1000]
	 	ho, hw = slant_inclined_path_equivalent_height(f, P)

	 	ho = [5.1157693  5.11201832] km    # it's correct
	 	hw = [1.66831618 1.6674496 ] km    # it's correct
	 2- the outputs are mixed
	 	f = [39]
	 	p = [1000, 1010]
	 	ho, hw = slant_inclined_path_equivalent_height(f, P)

	 	ho = [5.1157693  1.66831618] km    # it's not correct (the outputs are mixed)
	 	hw = [5.1237091  1.66833432] km    # it's not correct

	 3- the outputs are mixed and it's not be able to distinguish
	 	the orders!!!!
	 	f = [39, 40]
	 	p = [1000, 1010]
	 	ho, hw = slant_inclined_path_equivalent_height(f, P)

	 	ho = [[5.1157693  5.11201832]
 			 [1.66831618 1.6674496 ]] km    # it's not correct (the outputs are mixed)
	 	hw = [[5.1237091  5.11994035]
 			 [1.66833432 1.66746586]] km    # it's not correct
	
	it's decided to remove the vectorization and the calculation is done
	element by element!! see  below examples:

	 1- the outputs are correct
	 	f = [39, 40]
	 	p = [1000]
	 	ho, hw = slant_inclined_path_equivalent_height(f, P)

	 	ho = [5.1157693  5.11201832] km    # it's correct
	 	hw = [1.66831618 1.6674496 ] km    # it's correct
	 2- the outputs are correct
	 	f = [39]
	 	p = [1000, 1010]
	 	ho, hw = slant_inclined_path_equivalent_height(f, P)

	 	ho = [5.1157693 5.1237091] km    # it's correct 
	 	hw = [1.66831618 1.66833432] km    # it's correct

	 3- the outputs are correct
	 	f = [39, 40]
	 	p = [1000, 1010]
	 	ho, hw = slant_inclined_path_equivalent_height(f, P)

	 	ho = [5.1157693  5.11994035] km    # it's  correct 
	 	hw = [1.66831618 1.66746586] km    # it's  correct

16- iturpropag --> models --> iturp618 --> scintillation_attenuation_sigma:
	. there is a vague in input/ output parameters. I will explain it by giving some 
	examples:
	1 - consider we have two locations, and we want to calculate the scintillation
	attenuation sigma for similar frequency (with the same antenna)

	lat = [45,50]
	lon = [5,7]
	f = [39]
	el = [35, 40]
	D = 1
	eta = 0.6
	T = [280]
	H = None
	P = 1010
	sigma = scintillation_attenuation_sigma(lat, lon, f, el, D, eta, T, H,\
                                        P, hL=1000)


	output: [0.1263757  0.11057398] dB   # it's correct

	2- consider we have one location, and we want to calculate the scintillation
	attenuation sigma for two frequency:

	lat = [45]
	lon = [5]
	f = [39, 19]
	el = [35]
	D = 1
	eta = 0.6
	T = [280]
	H = None
	P = 1010
	sigma = scintillation_attenuation_sigma(lat, lon, f, el, D, eta, T, H,\
                                        P, hL=1000)


	output: [0.1263757  0.08524084] dB   # it's correct
 
	3- consider we have two locations which the frequency for each site is different:

	lat = [45, 50]
	lon = [5, 7]
	f = [39, 19]
	el = [35, 40]
	D = 1
	eta = 0.6
	T = [280]
	H = None
	P = 1010
	sigma = scintillation_attenuation_sigma(lat, lon, f, el, D, eta, T, H,\
                                        P, hL=1000)
	

	output: [[0.1263757  0.11057398]
 			[0.08524084 0.07474254]] dB      # for each site the sigma is calculated
			 								# for two frequency. which each row is related
											 # for each frequency and each column is related for each 
											 # location. here the user wanted the sigma for every site in 
											 # the frequency of that site. which the diagonal of 
											 # the output matrix it's the user's wanted!!
											 # which I think it would be vague specially for 
											 # amateur users.
	

	solution: I think for all of the application only three case 
	will happen:
	(i) one site(location) with different frequency
	(ii) different site with one frequency
	(iii) different site with different frequency
	will happen! then for this perpose the code line 
		fcn = np.vectorize(self.instance.scintillation_attenuation_sigma,
                           excluded=[0, 1, 3, 6, 7, 8], otypes=[np.ndarray])
	should be modified as:
	   fcn = self.instance.scintillation_attenuation_sigma

	in this case the output for case (1) and (2) is the same, and for case (3)

	lat = [45, 50]
	lon = [5, 7]
	f = [39, 19]
	el = [35, 40]
	D = 1
	eta = 0.6
	T = [280]
	H = None
	P = 1010
	sigma = scintillation_attenuation_sigma(lat, lon, f, el, D, eta, T, H,\
                                        P, hL=1000)

	output: [0.1263757  0.07474254] dB  # it's correct

17- iturpropag --> models --> iturp1853 --> total_attenuation_synthesis

	definition of gamma function in ITU-R P.1853 and Python:
		Gam(x,α,ϑ) = scipy.stats.gamma.sf(x,α, scale=ϑ)   # correct
		Gam(x,α,ϑ) = scipy.stats.gamma.sf(x,α, ϑ)         # wrong

		if the scale=ϑ is not written, it will consider the ϑ as 
		location (shift in x axis).

		Gam^-1(y,α,ϑ) = scipy.stats.gamma.ppf(1-y, α, scale=ϑ)  
		 ppf is the inverse of cdf. for inverse of ccdf we should y --> 1-y

	before: # eq.23 in ITU-R P.1853-1
		Z = stats.gamma.ppf(1 - np.exp(-(V / lambd)**kappa), 10, 0.1)
	after: 
		Z = stats.gamma.ppf(np.exp(-(V / lambd)**kappa), 10, scale=0.1)

18- iturpropag --> models --> iturp1853 --> scintillation_attenuation_synthesis
	. the theory implemented in ITUR-Py (MIT license) is vague:
	1- instead of "normal" noise the "uniform" noise distribution is used in phase, why?
	2- the noise is only applied to the phase, why?!
	3- the implemented low-pass filter after using "fftshift" command 
	becomes too distorted. the "fftshift" is used to keep the zero
	frequncy in the center and push the negative frequency to the left.
	but here the parts of the low-pass filter in negative frequency
	was discared before "fftshift" !!!
	4- the noise is not passed through the low-pass filter. The filter itself
	is assumed the noise plus the phase
	it's very strange!!
	
	corrected:
	the procedure is totally implemented again!! 